'use strict';

/**
 * Module dependencies.
 */
var _ = require('lodash'),
	errorHandler = require('../errors.server.controller'),
	mongoose = require('mongoose'),
	passport = require('passport'),
	User = mongoose.model('User'),
	Config = mongoose.model('Config'),
	Order = mongoose.model('Order'),
    formidable = require('formidable'),
    fs = require('fs'),
	path = require('path'),
	configs = require('../../../config/config'),
	nodemailer = require('nodemailer'),
	jsreport = require('jsreport'),
    csv = require('ya-csv');

/**
 * GenerateReportUser
 * The function generates a report for individual users to see what they ordered
 * Last edited by {Rendani Dau}
 * @param {Object} req
 * @param {Object} res
 */
exports.generateReportUser = function(req, res){
	User.findOne({username: req.body.username}, function(err, user){
		if(err || user === null) return res.status(400).send({message: 'Could not generate report!'});
		Order.find({username: req.body.username, created: {$gt: req.body.start, $lt: req.body.end}}, function(err, orders){
			if(err) return res.status(400).send({message: 'Could not generate report!'});
			
			//Read the sample html file for pdf format
			var sample = fs.readFileSync(path.resolve(__dirname, '../../reportTemplates/finance-user.html'), 'utf8');
			//Render PDF with the given details
			console.log('rendering');
			
			var today = new Date();
			
			//Arrays for dates
			var days = ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'];
			var months = ['Jan','Feb','Mar','Apr','May','Jun','July','Aug','Sep','Oct','Nov','Dec'];
			
			today = days[today.getDay()] + ' ' + months[today.getMonth()] + ' ' + today.getDay() + ', ' + today.getFullYear() + ' ' +
															today.getHours() + ':' + today.getMinutes() + ':' + today.getSeconds();
			var total = 0; 
			for(var j = 0; j < orders.length; j++)
			{
				var temp = new Date(orders[j].created);
				var date = days[temp.getDay()] + ' ' + months[temp.getMonth()] + ' ' + temp.getDay() + ', ' + temp.getFullYear() + ' ' +
															temp.getHours() + ':' + temp.getMinutes() + ':' + temp.getSeconds();
				orders[j] = orders[j].toObject();
				orders[j].newDate = date;
				total += orders[j].price * orders[j].quantity;
			}
			
			jsreport.render({
				template:{ content: sample,
					helpers: 'function mult(a,b){ return a*b; }',
					engine: 'handlebars'},
				data: {
					title: 'Spending History for user ' + user.displayName,
					description: 'Generated by finance',
					footer: 'Resolve Cafeteria Management System',
					date: today,
					to: { name: user.displayName, mail: user.email},
					start: req.body.start,
					end: req.body.end,
					items: orders,
					total: total
				}
			}).then(function(out) {
				console.log('in render function');
				out.stream.pipe(res);
			});
		});
	});
};


var generateReportCSV = function(data, res){

};
/**
 * GenerateReportAll
 * The function generates a report for all the users(only gives the total of what the user spent)
 * Last edited by {Rendani Dau}
 * @param {Object} req
 * @param {Object} res
 */
exports.generateReportAll = function(req, res){
	Order.aggregate([{ $group: {_id: '$username', total: {$sum: {$multiply: ['$price', '$quantity']}}}}
	], function(err, docs){
        if(req.body.format === 'csv') {
            //Send CSV report
            var writer = csv.createCsvFileWriter('./app/temp/report.csv', {flags: 'w'});
            writer.writeStream.on('close', function () {
                res.status(200).sendFile(path.join(__dirname, '../../temp', 'report.csv'));
            });
            writer.writeRecord(['User', 'Total']);
            for (var i = 0; i < docs.length; i++) {
                var arr = [];
                arr[0] = docs[i]._id;
                arr[1] = docs[i].total;
                writer.writeRecord(arr);
            }
            writer.writeStream.end();
        }
        else if(req.body.format === 'pdf') {
             //Read the sample html file for pdf format
             var sample = fs.readFileSync(path.resolve(__dirname, '../../reportTemplates/finance-all.html'), 'utf8');

             var total = 0;
             for(var i = 0; i < docs.length; i++){
             total += docs[i].total;
             }
             var today = new Date();

             //Arrays for dates
             var days = ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'];
             var months = ['Jan','Feb','Mar','Apr','May','Jun','July','Aug','Sep','Oct','Nov','Dec'];

             var _date = days[today.getDay()] + ' ' + months[today.getMonth()] + ' ' + today.getDay() + ', ' + today.getFullYear();

             jsreport.render({
             template:{ content: sample,
             engine: 'handlebars'},
             data: {
             title: 'Report of User spending',
             description: 'Generated by Finance',
             footer: 'Resolve Cafeteria Management System',
             date: _date,
             start: req.body.start,
             end: req.body.end,
             items: docs,
             tot: total
             }
             }).then(function(out) {
             console.log('in render function');
             out.stream.pipe(res);
             });
        }
        else
            res.status(400).send({message: 'Format not specified.'});
	});
};
